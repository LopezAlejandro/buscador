<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\Prg;
  use app\models\PrgSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;

/**
* PrgController implements the CRUD actions for Prg model.
*/
class PrgController extends Controller
{


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;


/**
* Lists all Prg models.
* @return mixed
*/
public function actionIndex()
{
    $searchModel  = new PrgSearch;
    $dataProvider = $searchModel->search($_GET);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->render('index', [
'dataProvider' => $dataProvider,
    'searchModel' => $searchModel,
]);
}

/**
* Displays a single Prg model.
* @param integer $prg_id
*
* @return mixed
*/
public function actionView($prg_id)
{
\Yii::$app->session['__crudReturnUrl'] = Url::previous();
Url::remember();
Tabs::rememberActiveState();

return $this->render('view', [
'model' => $this->findModel($prg_id),
]);
}

/**
* Creates a new Prg model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
public function actionCreate()
{
$model = new Prg;

try {
if ($model->load($_POST) && $model->save()) {
return $this->redirect(['view', 'prg_id' => $model->prg_id]);
} elseif (!\Yii::$app->request->isPost) {
$model->load($_GET);
}
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
$model->addError('_exception', $msg);
}
return $this->render('create', ['model' => $model]);
}

/**
* Updates an existing Prg model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $prg_id
* @return mixed
*/
public function actionUpdate($prg_id)
{
$model = $this->findModel($prg_id);

if ($model->load($_POST) && $model->save()) {
return $this->redirect(Url::previous());
} else {
return $this->render('update', [
'model' => $model,
]);
}
}
/*
public function actionDownload($prg_id)
{
$model = $this->findModel($prg_id);
header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
header('Content-Description: File Transfer');
header('Content-Type: application/octet-stream');
header('Content-Disposition: attachment; filename='.$model->archivo);
return \Yii::$app->response->sendFile('/srv/http/buscar/files/',$model->archivo);
}
*/
public function actionDownload($prg_id)
{

		$model = $this->findModel($prg_id);
		$src = "/srv/http/buscar/files/".$model->archivo;
		if(@file_exists($src)) {
			$path_parts = @pathinfo($src);
			$filename = $model->carrera0->sigla.' - '.$model->materia0->nombre.' - '.$model->catedra0->nombre.' - '.$model->archivo;
			//$mime = $this->__get_mime($path_parts['extension']);
			header('Content-Description: File Transfer');
			header('Content-Type: application/octet-stream');
			//header('Content-Type: '.$mime);
			header('Content-Disposition: attachment; filename= '.$filename);
			header('Content-Transfer-Encoding: binary');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Pragma: public');
			header('Content-Length: ' . filesize($src));
			ob_clean();
			flush();
			readfile($src);

		} else {

			header("HTTP/1.0 404 Not Found");
			exit();
		}
}

/**
* Deletes an existing Prg model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $prg_id
* @return mixed
*/
public function actionDelete($prg_id)
{
try {
$this->findModel($prg_id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$prg_id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the Prg model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $prg_id
* @return Prg the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($prg_id)
{
if (($model = Prg::findOne($prg_id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
